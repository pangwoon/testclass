# -*- coding: utf-8 -*-
"""20210728_PYHW_07_김태민

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oDEFkvP-oJYOXAfibWvB__Yr2nebMTYg
"""

# 436 

# What will be the output after the following statements?

x = ''

if bool(x):
  print('Yes')
else:
  print('No')

# x 가 ''으로 아무값도 가지고 있지 않기 때문에 bool을 취하면 False와 같은 거짓이 될거라 생각해 if조건문에서 else에 대응하는 'No'가 나올것으로 예상했다. - c

# 437

# What will be the output after the following statements?

x = ' '                                                                                   # 436번과 차이점으로 공백이 한칸 포함되어있다.

if bool(x):
  print('Yes')
else:
  print('No')

# x 가 ' '으로 공백이 한칸 있지만 bool을 취하면 False와 같은 거짓이 될거라 생각해 if조건문에서 else에 대응하는 'No'가 나올것으로 예상했다. - c

##### 오답 ###### 436번처럼 아무값도 가지고 있지 않아야만 False와 같고 값이 존재하면 bool을 취했을때 True와 같다. - b

# 438

# What will be the output after the following statements?

x = []

if bool(x):
  print('Yes')
else:
  print('No')

# x 가 ''으로 아무값도 가지고 있지 않은 리스트이므로 bool을 취하면 False와 같은 거짓이 될거라 생각해 if조건문에서 else에 대응하는 'No'가 나올것으로 예상했다. - a

# 439

# What will be the output after the following statements?

x = [1,2,3]

if bool(x):
  print('Yes')
else:
  print('No')

# x 가 데이터를 가지는 리스트 형태이므로 bool을 취하면 True와 같은 참이 될거라 생각해 if조건문에서 대응하는 'Yes'가 나올것으로 예상했다. - b

# 440

# What will be the output after the following statements?

x = ''

if not bool(x):
  print('Yes')
else:
  print('No')

# if조건문에서 not bool을 취하면 bool(x)가 거짓일때 if문이 실행되는 원리에 의해 위와 같이 x가 아무런 값을 가지지 않을때 'Yes'가 나올것으로 예상했다. - a

# 441

# What will be the output after the following statements?

x = 'print("Python")'
eval(x)

# eval()함수는 실행하고자 하는 표현식을 문자열(str)로 전달하면 표현식의 결괏값을 반환하는 함수이기에 print("Python")의 결괏값인 Python이 출력될것이다. - c

# 442

# What will be the output after the following statements if input entered is 45*2 ?

x = input("Enter an expression: ")
print(eval(x))

# 45*2를 입력하면 input으로 인해 x 는 문자열형태로 45*2를 가지고 eval()에 의해 90이 출력값으로 나올것이다. - c

# 443

# What will be the output after the following statements?

x = '''print("Python 3", end='') 
print(" is Good")'''
exec(x)

# eval 함수는 str형태의 표현식을 평가하나 문장을 직접 실행시키지는 못한다.
# 이에 반해 exec 함수는 표현식을 즉각 실행시켜준다.
# 우선 문제에서 작은 따옴표 3개 안에 print()가 두개 있지만 줄바꿈을 해주어야 오류가 나지않고
# 문자열임을 표현해주는(''' ''')안의 print()가 각각 실행되어지면 
# Python 3과 더불어 줄바꿈 \n이 삭제되어 출력되고
#  is Good이 출력되어 
# 결과적으로 Python 3 is Good이 출력될 것이다. - b

# 444

# What will be the output after the following statements?

a = ['a','b','c','A','B']
print(max(a))

# max()와 min()함수는 수와 관련되 있는줄만 알아 사실 결과는 모른다.
# 예상하자면 - d

# 445

# What will be the output after the following statements?

a = ['a','b','c','A','B']
print(min(a))

# 예상하자면 - a
###### 오답 ##### max로는 순서가 더 뒤에 있는것! min으로는 순서가 제일 앞이며 동시에 대문자가 나온다는 것을 알게되었다. - b

# 446

# What will be the output after the following statements?

a = ['a','b','c','1','2','A','B']
print(max(a))

# 예상하기에 숫자 2가 나올 줄 알았지만 보기에 존재하지 않아 문자가 우선이라 생각해 - d

# 447

# What will be the output after the following statements?

a = ['a','b','c','1','2','A','B']
print(min(a))

# 446번를 풀때 예상한게 맞다면 - c

# 448

# What will be the output after the following statements?

a = [1,2,3]
print(sum(a))

# 리스트 내의 데이터들을 모두 더한 값을 출력하는 실행이다 - d

# 449

# What will be the output after the following statements?

a = list(range(0,10,3))
print(sum(a))

# range()에서 0 = 시작값 10 = 최종값 3 = 증감값 이므로  a = [0,3,6,9] 가 되므로 총합은 18이다. - c

# 450

# What will be the output after the following statements?

a = list(range(10,-10,3))
print(sum(a))

# 시작값 10에 3을 더하는 반복으로 -10이 될 수 없기에 불가능을 표현해주는 0 이 나올것이다. - b

# 451

# What will be the output after the following statements?

a = list(range(-10,5,2))
print(sum(a))

# -10 -8 -6 -4 -2 0 2 4 의 총합 - a

# 452

# What will be the output after the following statements?

x = [5,4,3,2,1]
y = x.copy()
x[0] = 6
print(y)
print(x)
# copy의 뜻은 글자 그대로 복사이다. 따라서 y = [5,4,3,2,1]인데 x에 6을 추가했다 하더라도 그 이전에 copy()를 해서 y는 그대로 값이 나올것이다 - c

################### x = [6,5,4,3,2,1]이 아니다 위 실행은 '수정'임을 잊지말자!!!!!! 추가가 아니다!!!!!!!!

# 453

# What will be the output after the following statements?

import copy
x = [5,4,3,2,1]
y = copy.copy(x)
x.append(6)
print(y[0])

# copy 모듈이 import가 되는지는 알 수가 없어 모르겠다. 
##### 정답 ##### x.append()와 관련되지 않고 copy되어진 리스트의 인덱스 0번째 값이 출력되었다.

# 454

# What will be the output after the following statements?

import keyword
print(keyword.iskeyword('IS'))

# 모르겠다 - d

# 455

# What will be the output after the following statements?

import keyword
print(keyword.iskeyword('for'))

# 문제 두개를 보니 느낌상 ()안의 문자가 keyword 가 맞는지를 참/거짓 구분해주는 메소드인것 같다. 따라서 내 생각엔 - a

a=0
b=0
c=0
d=0
for n in range(1,10001):
  if 1 <= n < 10:
      n = str(n)
      if n[0] == '8':
          a += 1
  elif 10 <= n < 100:
      n = str(n)
      if n[0] == '8' or n[1] == '8':
          b += 1
      elif n[1] == '8' and n[1] == '8':
          b -= 1
  elif 100 <= n < 1000:
      n = str(n)
      if n[0] == '8' or n[1] == '8' or n[2] == '8':
          c += 1
      elif n[0] == '8' and n[1] == '8':
          c -= 1
      elif n[0] == '8' and n[2] == '8':
          c -= 1
      elif n[1] == '8' and n[2] == '8':
          c -= 1
      elif n[0] == '8' and n[1] == '8' and n[2] == '8':
          c += 1
  elif 1000 <= n < 10000:
      n = str(n)
      if n[0] == '8' or n[1] == '8' or n[2] == '8' or n[3] == '8':
          d += 1
      elif n[0] == '8' and n[1] == '8':
          d -= 1
      elif n[1] == '8' and n[2] == '8':
          d -= 1
      elif n[2] == '8' and n[3] == '8':
          d -= 1
      elif n[0] == '8' and n[3] == '8':
          d -= 1
      elif n[0] == '8' and n[1] == '8' and n[2] == '8' and n[3] == '8':
          d += 1

      
print(a)  # 8 , 8x , 8xx , 8xxx 의 총합
print(b)  #     x8 , x8x , x8xx 의 총합
print(c)  #        , xx8 , xx8x 의 총합
print(d)  #              , xxx8 의 총합

print(a*1 + b*2 + c*3 + d*4)

